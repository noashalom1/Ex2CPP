        -:    0:Source:SquareMat.cpp
        -:    0:Graph:Main-SquareMat.gcno
        -:    0:Data:Main-SquareMat.gcda
        -:    0:Runs:2
        -:    1:// noapatito123@gmail.com
        -:    2:#include "SquareMat.hpp"
        -:    3:
        -:    4:using namespace matrix;
        -:    5:
        -:    6:namespace matrix{
        -:    7:
        -:    8:// ==========================
        -:    9://     PRIVATE FUNCTIONS
        -:   10:// ==========================
        -:   11:
function _ZNK6matrix9SquareMat6getSumEv called 24 returned 100% blocks executed 100%
       24:   12:double SquareMat::getSum() const {
       24:   13:    double sum = 0.0;
       72:   14:    for (int i = 0; i < size; ++i)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
      144:   15:        for (int j = 0; j < size; ++j)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       96:   16:            sum += data[i][j];
       24:   17:    return sum;
        -:   18:}
        -:   19:
        -:   20:// ==========================
        -:   21://     CONSTRUCTORS
        -:   22:// ==========================
        -:   23:
function _ZN6matrix9SquareMatC2Ei called 96 returned 96% blocks executed 100%
       96:   24:SquareMat::SquareMat(int size) : SquareMat(size, 0.0){}
call    0 returned 96%
        -:   25:
function _ZN6matrix9SquareMatC2Eid called 130 returned 97% blocks executed 86%
      130:   26:SquareMat::SquareMat(int size, double scalar) : size(size) {
      130:   27:    if (size <= 0) throw std::invalid_argument("Invalid matrix size.");
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
call    2 returned 100%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 0%
call    7 never executed
     126*:   28:    data = new double *[size];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 returned 100%
      375:   29:        for (int i = 0; i < size; ++i)
branch  0 taken 66%
branch  1 taken 34% (fallthrough)
        -:   30:        {
     249*:   31:            data[i] = new double[size];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 returned 100%
      764:   32:            for (int j = 0; j < size; ++j)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   33:            {
      515:   34:                data[i][j] = scalar; // קובע את כל הערכים להיות הסקלר
        -:   35:            }
        -:   36:        }    
      126:   37:}
        -:   38:
function _ZN6matrix9SquareMatC2ERKS0_ called 50 returned 100% blocks executed 87%
      50*:   39:SquareMat::SquareMat(const SquareMat& other) : size(other.size), data(new double *[other.size]) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 returned 100%
      141:   40:    for (int i = 0; i < size; ++i)
branch  0 taken 65%
branch  1 taken 35% (fallthrough)
        -:   41:    {
      91*:   42:        data[i] = new double[size]; // allocate new row
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 never executed
call    3 returned 100%
      266:   43:        for (int j = 0; j < size; ++j)
branch  0 taken 66%
branch  1 taken 34% (fallthrough)
        -:   44:        {
      175:   45:            data[i][j] = other.data[i][j]; // copy value
        -:   46:        }
        -:   47:    }
       50:   48:}
        -:   49:
function _ZN6matrix9SquareMatD2Ev called 176 returned 100% blocks executed 83%
      352:   50:SquareMat::~SquareMat() {
     176*:   51:    if (!data) return;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      516:   52:    for (int i = 0; i < size; ++i)
branch  0 taken 66%
branch  1 taken 34% (fallthrough)
      340:   53:        delete[] data[i];
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
      176:   54:    delete[] data;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
     176*:   55:}
        -:   56:
        -:   57:// ==========================
        -:   58://     ACCESS
        -:   59:// ==========================
        -:   60:
function _ZN6matrix9SquareMatixEi called 383 returned 99% blocks executed 89%
      383:   61:double* SquareMat::operator[](int i) {
      383:   62:    if (i < 0 || i >= size) throw std::out_of_range("Invalid row index.");
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
call    4 returned 100%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 0%
call    9 never executed
      379:   63:    return data[i];
        -:   64:}
        -:   65:
function _ZNK6matrix9SquareMatixEi called 156 returned 100% blocks executed 56%
      156:   66:const double* SquareMat::operator[](int i) const {
     156*:   67:    if (i < 0 || i >= size) throw std::out_of_range("Invalid row index.");
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
call    4 never executed
call    5 never executed
branch  6 never executed (fallthrough)
branch  7 never executed (throw)
call    8 never executed
call    9 never executed
      156:   68:    return data[i];
        -:   69:}
        -:   70:
        -:   71:// ==========================
        -:   72://     ASSIGNMENT
        -:   73:// ==========================
        -:   74:
function _ZN6matrix9SquareMataSERKS0_ called 38 returned 100% blocks executed 100%
       38:   75:SquareMat& SquareMat::operator=(const SquareMat& other) {
       38:   76:    if (this != &other) {
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
       36:   77:            SquareMat temp(other);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       36:   78:            std::swap(size, temp.size);
call    0 returned 100%
       36:   79:            std::swap(data, temp.data);
call    0 returned 100%
       36:   80:        }
call    0 returned 100%
       38:   81:        return *this;
        -:   82:}
        -:   83:
function _ZN6matrix9SquareMataSEd called 2 returned 100% blocks executed 100%
        2:   84:SquareMat& SquareMat::operator=(double scalar) {
        6:   85:    for (int i = 0; i < size; ++i)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       12:   86:        for (int j = 0; j < size; ++j)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        8:   87:            data[i][j] = scalar;
        2:   88:    return *this;
        -:   89:}
        -:   90:
        -:   91:// ==========================
        -:   92://     ARITHMETIC
        -:   93:// ==========================
        -:   94:
function _ZNK6matrix9SquareMatplERKS0_ called 6 returned 67% blocks executed 84%
        6:   95:SquareMat SquareMat::operator+(const SquareMat& other) const {
        6:   96:    if (size != other.size)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:   97:        throw std::invalid_argument("Matrix sizes do not match for addition.");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 0%
call    5 never executed
        4:   98:    SquareMat res(size);
call    0 returned 100%
       12:   99:    for (int i = 0; i < size; ++i)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       24:  100:        for (int j = 0; j < size; ++j)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       16:  101:            res[i][j] = data[i][j] + other[i][j];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        4:  102:    return res;
    =====:  103:}
call    0 never executed
        -:  104:
function _ZNK6matrix9SquareMatmiERKS0_ called 6 returned 67% blocks executed 84%
        6:  105:SquareMat SquareMat::operator-(const SquareMat& other) const {
        6:  106:    if (size != other.size)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:  107:        throw std::invalid_argument("Matrix sizes do not match for subtraction.");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 0%
call    5 never executed
        4:  108:    SquareMat res(size);
call    0 returned 100%
       12:  109:    for (int i = 0; i < size; ++i)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       24:  110:        for (int j = 0; j < size; ++j)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       16:  111:            res[i][j] = data[i][j] - other[i][j];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        4:  112:    return res;
    =====:  113:}
call    0 never executed
        -:  114:
function _ZNK6matrix9SquareMatmlERKS0_ called 22 returned 91% blocks executed 86%
       22:  115:SquareMat SquareMat::operator*(const SquareMat& other) const {
       22:  116:    if (size != other.size)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        2:  117:        throw std::invalid_argument("Matrix sizes do not match for multiplication.");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 0%
call    5 never executed
       20:  118:    SquareMat res(size);
call    0 returned 100%
       52:  119:    for (int i = 0; i < size; ++i)
branch  0 taken 62%
branch  1 taken 38% (fallthrough)
       88:  120:        for (int j = 0; j < size; ++j)
branch  0 taken 64%
branch  1 taken 36% (fallthrough)
      160:  121:            for (int k = 0; k < size; ++k)
branch  0 taken 65%
branch  1 taken 35% (fallthrough)
      104:  122:                res[i][j] += data[i][k] * other[k][j];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       20:  123:    return res;
    =====:  124:}
call    0 never executed
        -:  125:
function _ZNK6matrix9SquareMatmlEd called 6 returned 100% blocks executed 92%
        6:  126:SquareMat SquareMat::operator*(double scalar) const {
        6:  127:    SquareMat res(size);
call    0 returned 100%
       18:  128:    for (int i = 0; i < size; ++i)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       36:  129:        for (int j = 0; j < size; ++j)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       24:  130:            res[i][j] = data[i][j] * scalar;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  131:    return res;
    =====:  132:}
call    0 never executed
        -:  133:
function _ZN6matrixmlEdRKNS_9SquareMatE called 2 returned 100% blocks executed 100%
        2:  134:SquareMat operator*(double scalar, const SquareMat& mat) {
        2:  135:    return mat * scalar;
call    0 returned 100%
        -:  136:}
        -:  137:
        -:  138:// =======================================
        -:  139://     MODULO, MULTIPLICATION, DIVISION
        -:  140:// =======================================
        -:  141:
function _ZNK6matrix9SquareMatrmERKS0_ called 6 returned 67% blocks executed 84%
        6:  142:SquareMat SquareMat::operator%(const SquareMat& other) const {
        6:  143:    if (size != other.size)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:  144:        throw std::invalid_argument("Matrix sizes do not match for element-wise multiplication.");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 0%
call    5 never executed
        4:  145:    SquareMat res(size);
call    0 returned 100%
       12:  146:    for (int i = 0; i < size; ++i)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       24:  147:        for (int j = 0; j < size; ++j)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       16:  148:            res[i][j] = data[i][j] * other[i][j];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        4:  149:    return res;
    =====:  150:}
call    0 never executed
        -:  151:
function _ZNK6matrix9SquareMatrmEi called 6 returned 67% blocks executed 83%
        6:  152:SquareMat SquareMat::operator%(int scalar) const {
        6:  153:    if (std::abs(scalar) < 1e-9)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:  154:        throw std::invalid_argument("Modulo by zero.");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 0%
call    5 never executed
        4:  155:    SquareMat res(size);
call    0 returned 100%
       12:  156:    for (int i = 0; i < size; ++i)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       24:  157:        for (int j = 0; j < size; ++j)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       16:  158:            res[i][j] = static_cast<int>(data[i][j]) % scalar;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:  159:    return res;
    =====:  160:}
call    0 never executed
        -:  161:
function _ZNK6matrix9SquareMatdvEd called 8 returned 50% blocks executed 84%
        8:  162:SquareMat SquareMat::operator/(double scalar) const {
        8:  163:    if (std::abs(scalar) < 1e-9)
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        4:  164:        throw std::invalid_argument("Division by zero.");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 0%
call    5 never executed
        4:  165:    SquareMat res(size);
call    0 returned 100%
       12:  166:    for (int i = 0; i < size; ++i)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       24:  167:        for (int j = 0; j < size; ++j)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       16:  168:            res[i][j] = data[i][j] / scalar;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        4:  169:    return res;
    =====:  170:}
call    0 never executed
        -:  171:
        -:  172:// ===========================
        -:  173://     UNARY MINUS OPERATOR
        -:  174:// ===========================
        -:  175:
function _ZNK6matrix9SquareMatngEv called 2 returned 100% blocks executed 92%
        2:  176:SquareMat SquareMat::operator-() const {
        2:  177:    SquareMat res(size);
call    0 returned 100%
        6:  178:    for (int i = 0; i < size; ++i)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       12:  179:        for (int j = 0; j < size; ++j)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        8:  180:            res[i][j] = -data[i][j];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        2:  181:    return res;
    =====:  182:}
call    0 never executed
        -:  183:
        -:  184:// ===========================
        -:  185://     POWER OPERATOR
        -:  186:// ===========================
        -:  187:
function _ZNK6matrix9SquareMateoEi called 6 returned 67% blocks executed 68%
        6:  188:SquareMat SquareMat::operator^(int power) const {
        6:  189:    if (power < 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:  190:        throw std::invalid_argument("Negative exponent not supported.");
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 never executed
        4:  191:    SquareMat res(size, 0);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       10:  192:    for (int i = 0; i < size; ++i)
branch  0 taken 60%
branch  1 taken 40% (fallthrough)
        6:  193:        res[i][i] = 1;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  194:
        4:  195:    SquareMat base(*this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       12:  196:    while (power > 0) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        8:  197:        if (power % 2 == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        8:  198:            res = res * base;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        8:  199:        base = base * base;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        8:  200:        power /= 2;
        -:  201:    }
        8:  202:    return res;
        4:  203:}
call    0 returned 100%
call    1 never executed
call    2 never executed
        -:  204:
        -:  205:// ==========================
        -:  206://     INCREMENT / DECREMENT
        -:  207:// ==========================
        -:  208:
function _ZN6matrix9SquareMatppEv called 4 returned 100% blocks executed 100%
        4:  209:SquareMat& SquareMat::operator++() {
       12:  210:    for (int i = 0; i < size; ++i)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       24:  211:        for (int j = 0; j < size; ++j)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       16:  212:            ++data[i][j];
        4:  213:    return *this;
        -:  214:}
        -:  215:
function _ZN6matrix9SquareMatppEi called 2 returned 100% blocks executed 100%
        2:  216:SquareMat SquareMat::operator++(int) {
        2:  217:    SquareMat tmp(*this);
call    0 returned 100%
        2:  218:    ++(*this);
call    0 returned 100%
        2:  219:    return tmp;
        -:  220:}
        -:  221:
function _ZN6matrix9SquareMatmmEv called 4 returned 100% blocks executed 100%
        4:  222:SquareMat& SquareMat::operator--() {
       12:  223:    for (int i = 0; i < size; ++i)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       24:  224:        for (int j = 0; j < size; ++j)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       16:  225:            --data[i][j];
        4:  226:    return *this;
        -:  227:}
        -:  228:
function _ZN6matrix9SquareMatmmEi called 2 returned 100% blocks executed 100%
        2:  229:SquareMat SquareMat::operator--(int) {
        2:  230:    SquareMat tmp(*this);
call    0 returned 100%
        2:  231:    --(*this);
call    0 returned 100%
        2:  232:    return tmp;
        -:  233:}
        -:  234:
        -:  235:// ==========================
        -:  236://     TRANSPOSE
        -:  237:// ==========================
        -:  238:
function _ZNK6matrix9SquareMatcoEv called 6 returned 100% blocks executed 92%
        6:  239:SquareMat SquareMat::operator~() const {
        6:  240:    SquareMat res(size);
call    0 returned 100%
       18:  241:    for (int i = 0; i < size; ++i)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       36:  242:        for (int j = 0; j < size; ++j)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       24:  243:            res[j][i] = data[i][j];
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        6:  244:    return res;
    =====:  245:}
call    0 never executed
        -:  246:
        -:  247:// ==========================
        -:  248://     COMPARISON OPERATORS
        -:  249:// ==========================
        -:  250:
function _ZNK6matrix9SquareMateqERKS0_ called 4 returned 100% blocks executed 100%
        4:  251:bool SquareMat::operator==(const SquareMat& other) const {
        4:  252:    return getSum() == other.getSum();
call    0 returned 100%
call    1 returned 100%
        -:  253:}
        -:  254:
function _ZNK6matrix9SquareMatneERKS0_ called 2 returned 100% blocks executed 100%
        2:  255:bool SquareMat::operator!=(const SquareMat& other) const {
        2:  256:    return !(*this == other);
call    0 returned 100%
        -:  257:}
        -:  258:
function _ZNK6matrix9SquareMatltERKS0_ called 2 returned 100% blocks executed 100%
        2:  259:bool SquareMat::operator<(const SquareMat& other) const {
        2:  260:    return getSum() < other.getSum();
call    0 returned 100%
call    1 returned 100%
        -:  261:}
        -:  262:
function _ZNK6matrix9SquareMatleERKS0_ called 2 returned 100% blocks executed 100%
        2:  263:bool SquareMat::operator<=(const SquareMat& other) const {
        2:  264:    return getSum() <= other.getSum();
call    0 returned 100%
call    1 returned 100%
        -:  265:}
        -:  266:
function _ZNK6matrix9SquareMatgtERKS0_ called 2 returned 100% blocks executed 100%
        2:  267:bool SquareMat::operator>(const SquareMat& other) const {
        2:  268:    return getSum() > other.getSum();
call    0 returned 100%
call    1 returned 100%
        -:  269:}
        -:  270:
function _ZNK6matrix9SquareMatgeERKS0_ called 2 returned 100% blocks executed 100%
        2:  271:bool SquareMat::operator>=(const SquareMat& other) const {
        2:  272:    return getSum() >= other.getSum();
call    0 returned 100%
call    1 returned 100%
        -:  273:}
        -:  274:
        -:  275:// ==========================
        -:  276://     DETERMINANT (!)
        -:  277:// ==========================
        -:  278:
function _ZNK6matrix9SquareMatntEv called 6 returned 100% blocks executed 100%
        6:  279:double SquareMat::operator!() const {
        6:  280:    const double EPSILON = 1e-9;
        6:  281:    if (size == 1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:  282:        return data[0][0];
        -:  283:
        4:  284:    double det = 1.0;
        4:  285:    SquareMat temp(*this);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  286:
       11:  287:    for (int i = 0; i < size; ++i) {
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        8:  288:        if (std::abs(temp.data[i][i]) < EPSILON) {
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
        2:  289:            bool found = false;
        3:  290:            for (int j = i + 1; j < size; ++j) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  291:                if (temp.data[j][i] > EPSILON) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  292:                    std::swap(temp.data[i], temp.data[j]);
call    0 returned 100%
        1:  293:                    det *= -1;
        1:  294:                    found = true;
        1:  295:                    break;
        -:  296:                }
        -:  297:            }
        2:  298:            if (!found)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  299:                return 0.0;
        -:  300:        }
        -:  301:
        7:  302:        det *= temp.data[i][i];
       12:  303:        for (int j = i + 1; j < size; ++j) {
branch  0 taken 42%
branch  1 taken 58% (fallthrough)
        5:  304:            double factor = temp.data[j][i] / temp.data[i][i];
       17:  305:            for (int k = i; k < size; ++k)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
       12:  306:                temp.data[j][k] -= factor * temp.data[i][k];
        -:  307:        }
        -:  308:    }
        3:  309:    return det;
        4:  310:}
call    0 returned 100%
        -:  311:
        -:  312:// ==========================
        -:  313://     COMPOUND ASSIGNMENT
        -:  314:// ==========================
        -:  315:
function _ZN6matrix9SquareMatpLERKS0_ called 2 returned 100% blocks executed 75%
        2:  316:SquareMat& SquareMat::operator+=(const SquareMat& other) {
        2:  317:    *this = *this + other;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        2:  318:    return *this;
        -:  319:}
        -:  320:
function _ZN6matrix9SquareMatmIERKS0_ called 2 returned 100% blocks executed 75%
        2:  321:SquareMat& SquareMat::operator-=(const SquareMat& other) {
        2:  322:    *this = *this - other;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        2:  323:    return *this;
        -:  324:}
        -:  325:
function _ZN6matrix9SquareMatmLERKS0_ called 2 returned 100% blocks executed 75%
        2:  326:SquareMat& SquareMat::operator*=(const SquareMat& other) {
        2:  327:    *this = *this * other;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        2:  328:    return *this;
        -:  329:}
        -:  330:
function _ZN6matrix9SquareMatmLEd called 2 returned 100% blocks executed 75%
        2:  331:SquareMat& SquareMat::operator*=(double scalar) {
        2:  332:    *this = *this * scalar;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        2:  333:    return *this;
        -:  334:}
        -:  335:
function _ZN6matrix9SquareMatdVEd called 4 returned 50% blocks executed 75%
        4:  336:SquareMat& SquareMat::operator/=(double scalar) {
        4:  337:    *this = *this / scalar;
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        2:  338:    return *this;
        -:  339:}
        -:  340:
function _ZN6matrix9SquareMatrMERKS0_ called 2 returned 100% blocks executed 75%
        2:  341:SquareMat& SquareMat::operator%=(const SquareMat& other) {
        2:  342:    *this = *this % other;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        2:  343:    return *this;
        -:  344:}
        -:  345:
function _ZN6matrix9SquareMatrMEi called 2 returned 100% blocks executed 75%
        2:  346:SquareMat& SquareMat::operator%=(int scalar) {
        2:  347:    *this = *this % scalar;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
call    6 returned 100%
call    7 never executed
        2:  348:    return *this;
        -:  349:}
        -:  350:
        -:  351:// ==========================
        -:  352://     OUTPUT <<
        -:  353:// ==========================
        -:  354:
function _ZN6matrixlsERSoRKNS_9SquareMatE called 1 returned 100% blocks executed 100%
        1:  355:std::ostream& operator<<(std::ostream& os, const SquareMat& mat) {
        3:  356:    for (int i = 0; i < mat.getSize(); ++i) {
call    0 returned 100%
branch  1 taken 67%
branch  2 taken 33% (fallthrough)
        6:  357:        for (int j = 0; j < mat.getSize(); ++j) {
call    0 returned 100%
branch  1 taken 67%
branch  2 taken 33% (fallthrough)
        4:  358:            os << mat[i][j] << " ";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  359:        }
        2:  360:        os << "\n";
call    0 returned 100%
        -:  361:    }
        1:  362:    return os;
        -:  363:}
        -:  364:
function _ZNK6matrix9SquareMat7getSizeEv called 10 returned 100% blocks executed 100%
       10:  365:int SquareMat::getSize() const {
       10:  366:    return size;
        -:  367:}
        -:  368:
        -:  369:} // namespace matrix
        -:  370:
